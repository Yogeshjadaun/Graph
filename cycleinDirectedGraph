{
import java.io.*;
import java.util.*;
class Graph{
	@SuppressWarnings("unchecked")
    public static void main(String[] args)
    {
		Scanner in = new Scanner(System.in);
		int t = in.nextInt();
		while(t-- > 0){
			int v = in.nextInt();
			int e = in.nextInt();
			LinkedList<Integer>[] alist = new LinkedList[v];
			for(int i=0;i<v;i++) alist[i] = new LinkedList<Integer>();
			while(e-->0) {
				int n1 = in.nextInt();
				int n2 = in.nextInt();
				alist[n1].add(n2);
				alist[n2].add(n1);
			}
			GfG g = new GfG();
			if(g.isCyclic(v,alist)) {
				System.out.println(1);
			}
			else
				System.out.println(0);
		}
    }
}
}

class GfG
{
    boolean isCyclicUtil(int current,boolean visited[],LinkedList<Integer>[] alist,int parent)
    {
        visited[current]=true;
        Integer u;
         Iterator<Integer> it = alist[current].iterator();
        while (it.hasNext())
        {
            u= it.next();
 
        //for(int u:alist[current]){
            if(!visited[u]){
                if(isCyclicUtil(u,visited,alist,current))
                  return true;
            }
            else if(u!=parent){
               return  true;
            }
        }
        return false;
    }
    Boolean isCyclic(int V,LinkedList<Integer>[] alist)
    {
       //add code here.
       boolean visited[]=new boolean[V];
       for(int i=0;i<V;i++){
           if(!visited[i])
           if(isCyclicUtil(i,visited,alist,-1)){
               return true;
           }
       }
       return false;
    }
}
